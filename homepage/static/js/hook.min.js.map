{"version":3,"file":"hook.min.js","mappings":"mBACA,I,qcCEA,aAGI,WAAmBA,GACfC,KAAKD,MAAQA,CACjB,CASJ,OAHW,YAAAE,SAAP,WACI,OAAOD,KAAKD,OAAS,GAAKC,KAAKD,OAAS,CAC5C,EACJ,EAdA,GA+CA,aAUI,WACIG,EACAC,EACAC,EACAC,GAEAL,KAAKE,QAAUA,EAEfF,KAAKG,QAAUA,EACfH,KAAKI,uBAAyBA,EAC9BJ,KAAKK,QAAUA,EAEfL,KAAKM,cAAWC,EAChBP,KAAKQ,YAAa,CACtB,CAgEJ,OAxDkB,YAAAC,eAAd,W,koCACI,MAAO,CAAP,EAAO,IAAIC,SAAQ,SAAAC,GACf,IAAMC,EAAc,EAAKC,yBACHN,IAAlB,EAAKD,SACDM,EAAYX,YAGZ,EAAKE,WAGL,EAAKG,SAAUL,aAAeW,EAAYX,YAG1C,EAAKI,WAEJ,EAAKC,SAAUL,YAAcW,EAAYX,YAG1C,EAAKE,WAGTS,EAAYX,YACZ,EAAKG,uBAAuBQ,GAEhC,EAAKN,SAAWM,EAChBD,GACJ,I,qSAMG,YAAAG,OAAP,WACOd,KAAKQ,aACRO,SAASC,iBACL,SAAUhB,KAAKS,eAAeQ,KAAKjB,OAAO,GAE9CkB,OAAOF,iBACH,SAAUhB,KAAKS,eAAeQ,KAAKjB,OAAO,GAE9CA,KAAKQ,YAAa,EACtB,EAKO,YAAAW,OAAP,WACSnB,KAAKQ,aACVO,SAASK,oBACL,SAAUpB,KAAKS,eAAeQ,KAAKjB,OAAO,GAE9CkB,OAAOE,oBACH,SAAUpB,KAAKS,eAAeQ,KAAKjB,OAAO,GAE9CA,KAAKQ,YAAa,EACtB,EACJ,EAxFA,GA+FA,2B,8CAWA,QAXiC,OACtB,YAAAK,kBAAP,WACI,IAAMQ,EAAYH,OAAOI,QACnBC,EAAgBvB,KAAKE,QAAQsB,aAC7BC,EAAazB,KAAKE,QAAQwB,wBAAwBC,IAAMN,EACxDO,EAAeV,OAAOW,YAI5B,OAAO,IAAIC,GAHaT,EAAYO,EAEbH,GAAcF,EAEzC,EACJ,EAXA,CAAiCQ,GAahCb,OAAec,YAAcA,EAQ9B,+B,8CAWA,QAXkC,OACvB,YAAAnB,kBAAP,WACI,IAAMQ,EAAYH,OAAOI,QACnBC,EAAgBvB,KAAKE,QAAQsB,aAC7BC,EAAazB,KAAKE,QAAQwB,wBAAwBC,IAAMN,EACxDO,EAAeV,OAAOW,YAI5B,OAAO,IAAIC,GAHaT,EAAYO,EAEbH,IAAeF,EAAgBK,GAE1D,EACJ,EAXA,CAAkCG,GAajCb,OAAee,aAAeA,C","sources":["webpack://homepage/webpack/bootstrap","webpack://homepage/./homepage/static/ts/hook.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/**\n * A progress for element hooks.\n */\nexport class Progress {\n    value: number\n\n    public constructor(value: number) {\n        this.value = value\n    }\n\n    /**\n     * Determine whether a hooked element is\n     * currently inside the viewport.\n     */\n    public isInside(): boolean {\n        return this.value >= 0 && this.value <= 1\n    }\n}\n\n\n/**\n * Apply a hook on an html element which notifies the\n * event listener of the current scroll progress.\n *\n * There are three dispatched events:\n * `onProgressChange`, `onEnter` and `onLeave`.\n * `onEnter` is dispatched when the user resizes or scrolls\n * the document such that the element is in view. `onLeave`\n * is dispatched vice versa, when the element leaves the\n * viewport. Additionally, for progress driven events such\n * as animations, the `onProgressChangeInside` event can be utilized.\n *\n * Usage:\n * ```typescript\n * const element = document.getElementById('section-1')\n * const hook = new Hook(\n *     element,\n *     (progress) => {\n *         // Progress changed\n *     },\n *     () => {\n *         // On enter\n *     },\n *     () => {\n *         // On leave\n *     }\n * )\n * hook.attach()\n * ```\n */\nabstract class Hook {\n    element: HTMLElement\n\n    onEnter: () => void\n    onProgressChangeInside: (progress: Progress) => void\n    onLeave: () => void\n\n    progress?: Progress\n    isAttached: boolean\n\n    public constructor(\n        element: HTMLElement,\n        onEnter: () => void,\n        onProgressChangeInside: (progress: Progress) => void,\n        onLeave: () => void,\n    ) {\n        this.element = element\n\n        this.onEnter = onEnter\n        this.onProgressChangeInside = onProgressChangeInside\n        this.onLeave = onLeave\n\n        this.progress = undefined\n        this.isAttached = false\n    }\n\n    abstract calculateProgress(): Progress\n\n    /**\n     * Update the hook based on the current element position\n     * and dispatch the onEnter or the onLeave event accordingly.\n     */\n    private async updatePosition(): Promise<void> {\n        return new Promise(resolve => {\n            const newProgress = this.calculateProgress()\n            if (this.progress === undefined) {\n                if (newProgress.isInside()) {\n                    // The progress is set initially and\n                    // the element is inside the viewport\n                    this.onEnter()\n                }\n            } else {\n                if (this.progress!.isInside() && !newProgress.isInside()) {\n                    // The progress did change and the element\n                    // left the viewport\n                    this.onLeave()\n                }\n                if (!this.progress!.isInside() && newProgress.isInside()) {\n                    // The progress did change and the element\n                    // entered the viewport\n                    this.onEnter()\n                }\n            }\n            if (newProgress.isInside()) {\n                this.onProgressChangeInside(newProgress)\n            }\n            this.progress = newProgress\n            resolve()\n        })\n    }\n\n    /**\n     * Attach the hook to the document and window events.\n     */\n    public attach(): void {\n        if(this.isAttached) return\n        document.addEventListener(\n            'scroll', this.updatePosition.bind(this), true\n        )\n        window.addEventListener(\n            'resize', this.updatePosition.bind(this), true\n        )\n        this.isAttached = true\n    }\n\n    /**\n     * Detach the hook from the document and window events.\n     */\n    public detach(): void {\n        if (!this.isAttached) return\n        document.removeEventListener(\n            'scroll', this.updatePosition.bind(this), true\n        )\n        window.removeEventListener(\n            'resize', this.updatePosition.bind(this), true\n        )\n        this.isAttached = false\n    }\n}\n\n\n/**\n * A hook which starts at the top of the element and\n * ends at the bottom of the element.\n */\nexport class SectionHook extends Hook {\n    public calculateProgress(): Progress {\n        const scrollTop = window.scrollY\n        const elementHeight = this.element.offsetHeight\n        const elementTop = this.element.getBoundingClientRect().top + scrollTop\n        const windowHeight = window.innerHeight\n        const offsetScrollTop = scrollTop + windowHeight\n        const progressValue =\n            (offsetScrollTop - elementTop) / elementHeight\n        return new Progress(progressValue)\n    }\n}\n\n(window as any).SectionHook = SectionHook\n\n\n/**\n * A hook which starts at the top of the element and\n * ends at the bottom of the element, offset by the\n * viewport height for parallax effects\n */\nexport class ParallaxHook extends Hook {\n    public calculateProgress(): Progress {\n        const scrollTop = window.scrollY\n        const elementHeight = this.element.offsetHeight\n        const elementTop = this.element.getBoundingClientRect().top + scrollTop\n        const windowHeight = window.innerHeight\n        const offsetScrollTop = scrollTop + windowHeight\n        const progressValue =\n            (offsetScrollTop - elementTop) / (elementHeight + windowHeight)\n        return new Progress(progressValue)\n    }\n}\n\n(window as any).ParallaxHook = ParallaxHook\n"],"names":["value","this","isInside","element","onEnter","onProgressChangeInside","onLeave","progress","undefined","isAttached","updatePosition","Promise","resolve","newProgress","calculateProgress","attach","document","addEventListener","bind","window","detach","removeEventListener","scrollTop","scrollY","elementHeight","offsetHeight","elementTop","getBoundingClientRect","top","windowHeight","innerHeight","Progress","Hook","SectionHook","ParallaxHook"],"sourceRoot":""}